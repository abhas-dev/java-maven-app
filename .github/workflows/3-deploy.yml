name: 3Ô∏è‚É£ Deploy Application

# D√©clenchement manuel ou apr√®s le succ√®s du workflow Docker
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Docker image version to deploy (leave empty for latest)'
        required: false
        type: string
  
  workflow_run:
    workflows: ["2Ô∏è‚É£ Docker Build & Push"]
    types:
      - completed
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: ${{ vars.DOCKERHUB_USERNAME || secrets.DOCKERHUB_USERNAME }}/java-maven-app
  DEPLOY_PATH: /opt/java-maven-app

jobs:
  prepare-deployment:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.tag }}
      environment: ${{ steps.env.outputs.name }}
    
    steps:
      - name: üîç Determine version to deploy
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="latest"
          fi
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Version to deploy: $VERSION"
      
      - name: üåç Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          else
            ENV="staging"
          fi
          echo "name=$ENV" >> $GITHUB_OUTPUT
          echo "üåç Target environment: $ENV"

  deploy-docker-compose:
    name: Deploy with Docker Compose
    runs-on: ubuntu-latest
    needs: [prepare-deployment]
    if: needs.prepare-deployment.outputs.environment == 'staging'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üîê Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME || secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: üì¶ Pull Docker image
        run: |
          docker pull ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.prepare-deployment.outputs.version }}
      
      - name: üöÄ Deploy with Docker Compose
        run: |
          export IMAGE_TAG=${{ needs.prepare-deployment.outputs.version }}
          docker-compose -f docker-compose.yml down || true
          docker-compose -f docker-compose.yml up -d
          
          echo "‚è≥ Waiting for application to start..."
          sleep 10
      
      - name: üè• Health check
        run: |
          MAX_ATTEMPTS=30
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            if curl -f http://localhost:8080/actuator/health 2>/dev/null; then
              echo "‚úÖ Application is healthy!"
              exit 0
            fi
            ATTEMPT=$((ATTEMPT + 1))
            echo "‚è≥ Attempt $ATTEMPT/$MAX_ATTEMPTS - waiting for application..."
            sleep 5
          done
          
          echo "‚ùå Application failed to start!"
          docker-compose logs
          exit 1
      
      - name: üìã Deployment summary
        if: always()
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.prepare-deployment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.prepare-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.prepare-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  deploy-remote-server:
    name: Deploy to Remote Server
    runs-on: ubuntu-latest
    needs: [prepare-deployment]
    if: needs.prepare-deployment.outputs.environment == 'production'
    environment: production
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üîê Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
      
      - name: üì¶ Copy deployment files to server
        run: |
          scp -i ~/.ssh/deploy_key \
            docker-compose.yml \
            ${{ vars.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}/
      
      - name: üöÄ Deploy on remote server
        run: |
          ssh -i ~/.ssh/deploy_key \
            ${{ vars.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            
            cd ${{ env.DEPLOY_PATH }}
            
            # Login to DockerHub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ vars.DOCKERHUB_USERNAME || secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # Pull the new image
            docker pull ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.prepare-deployment.outputs.version }}
            
            # Backup current version (rollback capability)
            docker tag ${{ env.DOCKER_IMAGE_NAME }}:current ${{ env.DOCKER_IMAGE_NAME }}:rollback || true
            docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.prepare-deployment.outputs.version }} ${{ env.DOCKER_IMAGE_NAME }}:current
            
            # Deploy with zero-downtime
            export IMAGE_TAG=${{ needs.prepare-deployment.outputs.version }}
            docker-compose up -d --no-deps --build
            
            # Wait for health check
            sleep 15
            
            # Cleanup old images (keep last 3)
            docker image prune -af --filter "until=72h"
            
            echo "‚úÖ Deployment completed successfully!"
          EOF
      
      - name: üè• Remote health check
        run: |
          MAX_ATTEMPTS=30
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            if curl -f http://${{ secrets.DEPLOY_HOST }}:8080/actuator/health 2>/dev/null; then
              echo "‚úÖ Application is healthy on production!"
              exit 0
            fi
            ATTEMPT=$((ATTEMPT + 1))
            echo "‚è≥ Attempt $ATTEMPT/$MAX_ATTEMPTS - waiting for application..."
            sleep 5
          done
          
          echo "‚ùå Application failed health check!"
          exit 1
      
      - name: üîÑ Rollback on failure
        if: failure()
        run: |
          echo "üîÑ Rolling back to previous version..."
          ssh -i ~/.ssh/deploy_key \
            ${{ vars.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            
            cd ${{ env.DEPLOY_PATH }}
            
            # Rollback to previous version
            docker tag ${{ env.DOCKER_IMAGE_NAME }}:rollback ${{ env.DOCKER_IMAGE_NAME }}:current
            export IMAGE_TAG=rollback
            docker-compose up -d --no-deps
            
            echo "‚úÖ Rollback completed!"
          EOF
      
      - name: üßπ Cleanup SSH key
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key
      
      - name: üìã Deployment summary
        if: always()
        run: |
          echo "## üöÄ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.prepare-deployment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.prepare-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.DOCKER_IMAGE_NAME }}:${{ needs.prepare-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Host**: ${{ secrets.DEPLOY_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
      
      - name: üìß Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Production deployment successful!"
          else
            echo "‚ùå Production deployment failed!"
          fi
          # Ajoutez ici votre int√©gration de notification (Slack, Discord, email, etc.)

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [prepare-deployment, deploy-docker-compose, deploy-remote-server]
    if: always()
    
    steps:
      - name: üìä Final status
        run: |
          echo "## üìä Deployment Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.prepare-deployment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.prepare-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Overall Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚úÖ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The application has been successfully deployed." >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚ùå Deployment Failed!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs for more details." >> $GITHUB_STEP_SUMMARY
          fi
